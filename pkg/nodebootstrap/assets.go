// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (980B)
// assets/bootstrap.al2.sh (981B)
// assets/bootstrap.ubuntu.sh (2.022kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x5f\x6b\xdb\x3e\x14\x7d\xf7\xa7\x10\xb4\x0f\xbf\x1f\x44\x36\xeb\xc6\x1e\x0a\x7e\xf0\x12\xb7\x98\xb9\x4e\x89\xd3\x6d\xb0\x0d\xa3\x48\x37\xe9\x25\xf2\x95\x91\xe4\xb4\x5d\xc9\x77\x1f\x8a\xe3\x2d\x65\x65\xec\x4d\xba\xe7\xde\x73\xce\xfd\x73\xc6\x60\xeb\xa4\xd7\xdc\x75\x20\x71\x8d\x92\xb9\x27\xe7\xa1\x55\x4c\x59\xd3\x71\x24\xd6\x13\x7a\xb6\x36\x96\x6d\xfb\x15\x68\xf0\x93\xc3\x27\x6b\xc5\x0f\x43\xac\x44\xea\x1f\xd9\x05\xfb\x2f\x2b\x2f\xfe\x8f\xa2\xaf\x35\xd8\x1d\x4a\xf8\x1e\x9d\xb1\xd2\x48\xa1\x59\x0b\x5e\x28\xe1\x05\xeb\x84\x15\x2d\x78\xb0\xee\x92\x2d\xf2\xeb\x62\x5e\x4d\x58\xf6\xb9\x6e\x66\xf9\x55\x76\x57\x2e\x9b\x21\x16\xe5\xb4\x43\x6b\xa8\x05\xf2\x57\xa8\x21\x4d\xc0\xcb\x64\xb0\x98\x8c\x5c\x31\xd0\x2e\x3a\x63\xd7\xda\xac\x84\x66\x82\x14\x73\x5e\x78\x94\x2f\x34\xa6\xe5\x5d\xbd\xcc\x17\xcd\xac\xaa\x27\xac\x9a\xcf\xf2\xa6\xcc\x3e\xe4\xe5\xf8\x59\x66\x45\xb5\xac\xff\x2a\x77\xec\xf7\xa8\x36\xb4\x43\x86\xf8\x2b\x62\x07\xca\xe2\x76\xc2\x8a\xaa\x5e\x66\xd5\x34\x6f\x8a\xd9\x3f\x71\xeb\xc0\x7a\x50\x88\xf2\x47\x90\xb5\x17\xd6\xa7\x27\xcf\xa4\x77\x36\x59\x21\x8d\x05\xec\x5b\xc4\x18\xe7\x64\x14\x70\xec\xd2\xf3\xe7\xa3\xf2\xfe\x14\xd0\x62\x05\xda\x8d\xe0\xd0\xf6\x7e\x22\x74\x77\x2f\xe2\x41\x3f\x46\x93\x20\x39\x2f\x48\x02\x47\x95\x9e\x3f\x9f\x18\x1f\xb9\x5a\xf1\xc8\x3b\xa3\x02\xd1\x4d\xf6\xa5\xb9\x9d\xcf\xea\x11\xb2\xb0\x41\xe7\xc1\x1e\xf4\x52\x6f\x7b\x38\x0d\x3e\xa0\xbf\xe7\x5e\x20\xf9\x5f\x26\x86\x71\x8f\xe5\x52\x9b\x5e\xf1\xce\x9a\x1d\x2a\xb0\xa9\x78\x70\x23\x60\x28\xd4\x81\xe5\xb6\x27\x8f\x2d\xa4\xca\xc8\x2d\xd8\xb1\x3b\xf0\x0f\xc6\x6e\x79\xa7\xfb\x0d\x52\x2a\x09\xc7\x3a\x42\xbe\x42\xe2\x0a\x6d\x9a\x98\xce\x27\x92\x30\x8c\xed\x04\x96\x86\xd6\x03\x1e\xd6\x10\x70\x02\x1f\xab\x63\x46\x67\x14\x47\x5a\x5b\x71\x62\x01\x5b\xb1\x81\xf4\xfc\x39\x5c\x69\xfe\xb1\x6e\xf2\xe9\xa2\xc9\xa6\xd3\xf9\x5d\xb5\xdc\xc7\x6a\x6b\x63\x90\x36\x1e\xe0\x97\x47\xbc\x3f\x46\xeb\x7c\xf1\xa9\x98\xe6\x75\x33\x9b\xdf\x64\x45\xb5\x0f\xcb\x4f\x3a\xd1\x3b\xe0\xa2\x55\xef\xdf\x5d\xbe\x8d\xdf\x1c\xf5\xc3\x7a\x83\x43\xdc\xfc\x71\x26\x43\x38\x7e\x12\xad\xfe\x3d\xa5\xd7\x12\xc3\x3d\x85\xac\xe8\x67\x00\x00\x00\xff\xff\x69\x5f\xe1\x43\xd4\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x37, 0xe3, 0xdc, 0xc0, 0xf8, 0xc2, 0x4d, 0xef, 0xc2, 0xb6, 0xe3, 0x6, 0x3a, 0x78, 0x4e, 0x14, 0xd6, 0xfe, 0x32, 0x95, 0x54, 0x92, 0xc7, 0xb6, 0x80, 0x6a, 0xe3, 0xd7, 0x62, 0xe0, 0x2b}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x6b\xdb\x3c\x14\xbe\xd7\xaf\x38\xaf\x6b\x4a\xc3\x8b\xa3\x75\x74\x83\xb6\xc9\x20\x34\x1e\xe4\xa2\x49\x58\xca\x3e\x08\x99\x51\xe4\x93\x59\x54\x96\x8c\x74\x9c\xb5\x18\xef\xb7\x0f\x67\x76\x71\x46\xae\xca\xae\xac\xe7\x43\x8f\x8f\x1f\x59\x67\xff\xf1\xad\x32\x7c\x2b\x7c\xc6\x98\x47\x82\xc8\x02\x3a\x87\x4f\x8a\x3a\x58\xa8\x02\x77\x42\xe9\x0e\x1b\x5b\x1a\x8f\xc4\xd8\xae\x34\x92\x94\x35\xf0\x03\x29\xc9\xc5\x53\x52\xd8\xd4\x5f\x0c\xa0\x62\x00\x3f\x33\xa5\x11\x1c\x8a\x14\x94\xf1\x24\x8c\xc4\x84\x9e\x0b\x84\xc6\x73\x0b\xa9\x65\x00\x00\x6a\x07\xb0\x5e\x43\x10\x56\x47\xa6\x3a\x80\xf1\xb8\x61\x2f\xeb\x00\x36\x1b\x38\x3f\x6f\x5d\xcd\xe6\x46\xfc\x05\xdf\xd7\x6f\xa2\xeb\xcd\xff\x61\x23\xdf\x02\x65\x68\x0e\x81\x00\x28\x33\x0b\xad\xb3\xa5\x1c\x52\xe9\xfe\xe8\x3b\xc5\x00\x52\x6b\x10\x46\xc0\x91\x24\xc7\x47\x2f\x49\xf3\x6e\xfa\x61\x2e\x0a\x56\x33\x36\x5f\x4c\xe3\x64\xb6\x1c\x07\xe1\x85\x2c\x9d\x86\x28\xf2\x4a\xa3\x21\xc8\x88\x8a\x1b\xce\x2f\xdf\x5f\x0f\xdf\xbe\xbb\x1a\xb6\x4f\xae\x05\xa1\x27\x9e\x23\x89\x28\x15\x24\xb8\xb6\x52\xe8\x48\x15\xfb\xab\x41\xc0\x66\xf3\xd5\xc3\x64\x7e\x17\x27\xb3\xe9\xeb\x13\xbb\x86\x22\x95\xf6\x23\x1f\xbe\x2d\xe3\x7f\x10\xda\xd4\x3e\x08\xd8\xe4\xcb\x2a\x59\xc5\x9f\x3e\xcf\xee\xe2\x55\x32\x5d\xdc\x4f\x66\xf3\xd7\x87\x7b\x74\x7b\x25\xd1\xf3\xd4\xe6\x42\x99\x41\xc0\x98\xb7\xa5\x93\x78\x54\xfd\x63\xb9\x45\x8d\x34\x44\xb3\x87\x33\xa0\x4c\x79\x90\xc2\x80\xdd\xa3\x73\x2a\x45\xb8\x9f\x7c\x4d\x96\x8b\xe9\x8a\x31\x29\x08\x3e\x9c\xdc\x7b\x68\xfb\x90\x30\x1a\xc5\x8b\x8f\x2f\xc7\x17\x56\xed\xaa\x3e\x3a\x83\xb0\xea\xa1\xfa\xaf\x2e\x7b\x62\x83\xeb\x93\x9d\x84\xd5\x09\xb6\x66\xdd\xac\xe3\xb0\xea\x96\x37\x51\x78\xd1\xbf\x1f\xcd\x6f\x7c\xfc\x82\x60\x50\xb3\x66\x68\xe6\x9f\x3d\x61\x2e\x49\x43\x2a\x30\xb7\x26\x72\xa8\xad\x48\x7b\x3c\x1a\xb1\xd5\x08\xed\x67\xf7\x04\x4f\xc2\xd1\x0b\xff\x3b\x00\x00\xff\xff\x63\xb1\x18\x9c\xd5\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xa6, 0xd8, 0x43, 0x43, 0xc7, 0xe6, 0x70, 0x9, 0xcc, 0x0, 0x25, 0x22, 0x9b, 0x71, 0xd3, 0xc6, 0x65, 0x92, 0xf9, 0xde, 0xa9, 0x2, 0xff, 0xc6, 0x6a, 0xa9, 0x1d, 0x33, 0x9d, 0x3c, 0x89}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xef\x6f\xe2\x46\x10\xfd\xbe\x7f\xc5\x94\x43\x57\x50\xcf\x76\x73\x4d\x4f\xba\x24\xae\x4a\x03\x57\xa1\xe6\x20\x0a\x5c\x7f\x28\x4a\xd1\xb2\x3b\xe0\x15\xeb\x5d\x6b\x77\x0c\x89\x90\xfb\xb7\x57\x0b\x36\x21\xe8\x7a\x1f\x4e\xfd\x84\x77\xde\x9b\xe7\xf1\xec\x9b\xe1\xd5\x37\xc9\x5c\x99\x64\xce\x7d\xc6\x98\x47\x82\xc8\x02\x3a\x87\x8f\x8a\x9a\x63\xa1\x0a\x5c\x70\xa5\x9b\xb3\xb1\xa5\xf1\x48\x8c\x2d\x4a\x23\x48\x59\x03\x4b\xa4\x59\xce\x1f\x67\x85\x95\xbe\xd3\x85\x2d\x03\xd8\x64\x4a\x23\x38\xe4\x12\x94\xf1\xc4\x8d\xc0\x19\x3d\x15\x08\x81\x73\x09\xd2\x32\x00\x00\xb5\x00\xb8\xbf\x87\x56\x7b\xfb\x82\x54\xb5\x20\x4d\x43\xf4\xac\x6a\xc1\xc3\x03\xbc\x7e\x5d\xb3\x42\x72\x00\xff\x81\xbf\xef\xbf\x8f\xde\x3f\x7c\xd7\x0e\xf0\x25\x50\x86\x66\x27\x08\x80\x22\xb3\x50\x33\x2f\xeb\x98\x43\x2a\xdd\x9e\xb0\x50\x0c\x40\x5a\x83\x70\x05\x09\x92\x48\x70\xe5\x05\xe9\xa4\x29\x3f\xce\x79\xc1\x2a\xc6\x46\xe3\xfe\x60\x36\xbc\x4d\x5b\xed\x8e\x28\x9d\x86\x28\xf2\x4a\xa3\x21\xc8\x88\x8a\x8b\x24\x39\x7b\xf7\x3e\x7e\xfb\xe3\x79\x5c\xff\x26\x9a\x13\x7a\x4a\x72\x24\x1e\x49\x4e\x3c\xd1\x56\x70\x1d\xa9\x62\x7d\xde\x6d\xb1\xe1\x68\x32\xed\x8d\xae\x07\xb3\x61\xff\xeb\x15\x9b\x16\x45\x4a\x1e\x4b\x4e\xff\xba\x1d\xfc\x0f\xa2\xa1\xef\xdd\x16\xeb\xfd\x31\x99\x4d\x06\x77\xbf\x0f\xaf\x07\x93\x59\x7f\xfc\xb1\x37\x1c\x7d\xbd\xb8\x47\xb7\x56\x02\x7d\x22\x6d\xce\x95\xe9\xb6\x18\xf3\xb6\x74\x02\x5f\xb4\x7e\x55\xce\x51\x23\xc5\x68\xd6\xf0\x0a\x28\x53\x1e\x04\x37\x60\xd7\xe8\x9c\x92\x08\x1f\x7b\x7f\xce\x6e\xc7\xfd\x09\x63\x82\x13\xfc\xf4\xd9\xdc\x5d\xb7\x77\x0a\x57\x57\x83\xf1\x87\xc3\xf5\xb5\xb7\xf5\x53\xf5\xe2\x0e\xda\xdb\xa3\x53\x75\xd2\xcb\x23\x30\x9c\x2b\xd6\x14\x90\xb6\xb7\xcd\xe3\x45\xd4\xee\x1c\xbb\x3e\x98\xf3\x65\x56\xab\x5b\xb1\x50\x09\xf3\x86\x17\xc0\xb5\xe2\x1e\xea\x6a\x23\x5c\xf9\xb8\x7e\x6e\x62\xa7\x34\x41\xfa\x40\x13\xa4\x9b\xd8\x9e\xe6\xc9\x16\xc7\x62\xcc\x3f\x79\xc2\x3c\xf0\x1c\x7a\xa4\x28\x8c\x2b\x4a\xc6\x3a\x0c\xe0\x15\x4c\xc7\xfd\xf1\x45\x98\x11\x8f\xe0\x33\x5b\x6a\x09\x73\x04\x6d\xed\x0a\x25\x70\x02\x5c\xa3\x7b\x02\x52\x39\x36\xa2\xe0\x89\x3b\xf2\x50\x16\x6f\x76\x0a\x9b\x4c\x89\x0c\x94\x87\x4d\xc6\x09\x36\x08\xd2\x82\x32\xd0\xbb\x79\x0b\x9d\x03\x36\xe7\x1e\x25\x58\x03\x85\xe6\xca\xc0\xbe\x26\xb9\x17\xe0\x46\x42\x8e\xdc\x10\x90\x0d\x2f\x2f\xac\x23\x3e\xd7\x18\x8e\xb9\xf5\xd4\xb0\x41\x2a\x4f\xce\xfa\xee\x1b\x98\x97\x04\x8a\xbe\xf5\xbb\x7c\x63\x09\x84\x46\xee\x20\xb3\x9b\x90\xa4\x2d\x97\xf5\x27\x2d\x9c\xcd\x9f\x0b\x0f\xfd\xd9\x28\xca\x6c\x49\x90\xf1\xb5\x32\xcb\x9d\x00\x59\x10\xa5\x27\x9b\x2b\x8f\x21\x6f\x4f\x54\xe4\x51\x2f\x18\xc0\x17\x6c\x79\xb0\xd6\x97\x69\xff\x49\x08\xe3\x10\xa6\x61\xc7\x60\x00\x0b\xcd\x97\x3e\xed\xec\xb6\x51\xcb\x58\x89\x91\x2a\x8e\x7c\xda\xda\x03\x39\x7f\x8c\x82\xb1\x8e\x3c\xd7\x40\xbb\x1c\xcd\xe7\xa8\x7d\x93\x77\xd3\xfb\x65\x70\x33\xa9\xde\x70\x5d\x64\x3c\xde\xbf\x38\x56\xf6\x78\x65\x9c\x78\xbe\xd6\x2a\xac\x8c\x94\x59\x38\x1e\x09\x6b\x88\x2b\x83\x2e\x52\x39\x5f\x62\xda\xde\x86\x55\x30\xf8\x6d\x32\x1b\x5c\xdf\xcd\x7a\xd7\xd7\xe3\x4f\xa3\x69\x15\xcb\x95\x8b\x51\xb8\x78\x0f\xf7\x07\x1f\x7a\x9f\x6e\xa6\xb3\xbb\xc1\xaf\xc3\xf1\xa8\xaa\xa3\x27\xfb\xa3\x0a\x9d\x48\x0a\x5e\x7a\x8c\x78\x2e\xdf\x9d\x5f\xfc\x10\x9f\xd5\xef\x17\xda\x96\x32\x2a\x9c\x5d\x2b\x89\x2e\xe5\x1b\xdf\x00\x46\x45\x73\x65\x22\xa9\x5c\x9a\xd8\x82\x12\x61\x54\xf8\xa7\x3a\x82\x85\x35\x8b\x3d\x1e\xba\x1d\x70\x83\x14\xcb\x86\x71\xf8\x1e\x57\x9a\xe0\xed\x54\x5a\xb1\x42\xd7\x34\x11\x69\x63\xdd\x2a\x2a\x74\xb9\x54\x26\x15\x46\xd5\x80\xc3\xa5\xf2\x84\x2e\x0a\x6d\x4e\xc9\x95\x78\x0a\x04\x77\x45\x41\x9b\x0e\xfd\x9f\xf6\x86\xa3\xe9\xe1\x82\x76\xb3\x6a\xcd\x42\x2d\xd3\x53\xa7\xec\xc3\xf1\x13\xcf\xf5\x73\x9d\x9f\x23\x06\x4b\x35\xac\x6e\xb0\xcd\x7e\xf0\x9f\x17\x46\x98\xfb\xb0\x75\x76\x76\xba\xff\xf9\xa1\x6a\xb1\x2e\x6b\xd6\x03\x77\x2f\x78\xec\xdf\x00\x00\x00\xff\xff\xd8\xea\x02\x37\xe6\x07\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x32, 0xe5, 0x6b, 0xba, 0xaf, 0x62, 0x53, 0x86, 0xf7, 0x69, 0x69, 0x6a, 0x2f, 0x2c, 0x18, 0xb2, 0xe2, 0x2b, 0xbd, 0xc5, 0x85, 0x74, 0xe7, 0x50, 0x2f, 0xa9, 0xc, 0x6a, 0xb4, 0xa0, 0x1}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
